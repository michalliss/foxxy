//| mvnDeps:
//| - com.goyeau::mill-scalafix::0.6.0

package build

import mill._
import mill.scalajslib.api.ModuleKind
import scalalib._
import scalajslib._
import mill.scalajslib.api._
import publish._
import scalafmt._
import publish.*

import com.goyeau.mill.scalafix.ScalafixModule

object config {
  val scalaVersion   = "3.7.3"
  val scalaJSVersion = "1.20.1"
}

trait FoxxyPublish extends PublishModule with SonatypeCentralPublishModule {

  def publishVersion = "0.0.12"

  def pomSettings = PomSettings(
    description = "Foxxy",
    organization = "io.github.michalliss",
    url = "https://github.com/michalliss/foxxy",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("michalliss", "foxxy"),
    developers = Seq(
      Developer("michalliss", "Micha≈Ç Liss", "https://github.com/michalliss")
    )
  )
}

trait AppScalaModule extends ScalaModule with ScalafixModule with ScalafmtModule {
  def scalaVersion  = config.scalaVersion
  def scalacOptions = Seq("-Wunused:all")
}

trait AppScalaJSModule extends AppScalaModule with ScalaJSModule {
  def scalaJSVersion = config.scalaJSVersion
  def scalacOptions  = Seq("-Wunused:all")
}

object external {

  def tapir = Seq(
    mvn"com.softwaremill.sttp.tapir::tapir-core:1.11.44",
    mvn"com.softwaremill.sttp.tapir::tapir-json-zio:1.11.44"
  )

  def tapir_js = Seq(
    mvn"com.softwaremill.sttp.tapir::tapir-core::1.11.44",
    mvn"com.softwaremill.sttp.tapir::tapir-json-zio::1.11.44"
  )

  def tapirServer = Seq(
    mvn"com.softwaremill.sttp.tapir::tapir-http4s-server-zio:1.11.44",
    mvn"com.softwaremill.sttp.tapir::tapir-swagger-ui-bundle:1.11.44"
  )

  def zio = Seq(
    mvn"dev.zio::zio:2.1.21",
    mvn"dev.zio::zio-streams:2.1.21",
    mvn"dev.zio::zio-json:0.7.44",
    mvn"dev.zio::zio-logging:2.5.1",
    mvn"dev.zio::zio-logging-slf4j2-bridge:2.5.1"
  )

  def zio_js = Seq(
    mvn"dev.zio::zio::2.1.21",
    mvn"dev.zio::zio-streams::2.1.21",
    mvn"dev.zio::zio-json::0.7.44",
    mvn"dev.zio::zio-logging::2.5.1"
  )

  def quill = Seq(
    mvn"io.getquill::quill-jdbc-zio:4.8.6",
    mvn"org.postgresql:postgresql:42.7.8"
  )

  def flyway = Seq(
    mvn"org.flywaydb:flyway-core:11.13.2",
    mvn"org.flywaydb:flyway-database-postgresql:11.13.2"
  )

  def http4s = Seq(
    mvn"org.http4s::http4s-dsl:0.23.32",
    mvn"org.http4s::http4s-blaze-server:0.23.17"
  )

  def auth = Seq(
    mvn"com.password4j:password4j:1.8.4",
    mvn"com.auth0:java-jwt:4.5.0"
  )

  def frontend = zio_js ++ Seq(
    mvn"com.softwaremill.sttp.client3::core::3.11.0",
    mvn"com.softwaremill.sttp.client3::zio::3.11.0",
    mvn"com.softwaremill.sttp.tapir::tapir-sttp-client::1.11.44",
    mvn"com.raquo::laminar::17.2.1",
    mvn"com.raquo::waypoint::9.0.0",
    mvn"io.laminext::websocket::0.17.0",
    mvn"be.doeraene::web-components-ui5::2.12.1",
    mvn"org.scala-js::scalajs-java-securerandom::1.0.0".withDottyCompat(
      config.scalaVersion
    ),
    mvn"io.github.cquiroz::scala-java-time::2.6.0",
    mvn"io.github.kitlangton::animus::0.6.8"
  )
}

object `package` extends Module {

  def devBackend(): Command[Unit] = Task.Command {
    reference.backend.runBackground(Task.Anon(Args()))()
  }

  def devFrontend(): Command[Unit] = Task.Command {
    reference.`frontend_vite`.compile()()
  }

  object foxxy extends Module {

    object auth extends AppScalaModule with FoxxyPublish {
      override def mvnDeps = external.zio ++ external.auth
    }

    object backend extends AppScalaModule with FoxxyPublish {
      override def moduleDeps = Seq(shared.jvm)
      override def mvnDeps    =
        external.zio ++ external.tapir ++ external.tapirServer ++ external.http4s
    }

    object repo extends AppScalaModule with FoxxyPublish {
      override def mvnDeps = external.quill ++ external.flyway
    }

    object shared extends Module {
      trait SharedModule extends AppScalaModule with PlatformScalaModule with FoxxyPublish {}

      object jvm extends SharedModule {
        override def mvnDeps = external.zio ++ external.tapir
      }

      object js extends SharedModule with AppScalaJSModule {
        override def mvnDeps = external.zio_js ++ external.tapir_js
      }
    }

    object frontend extends AppScalaJSModule with FoxxyPublish {
      override def moduleKind = ModuleKind.ESModule

      override def moduleSplitStyle = ModuleSplitStyle.SmallModulesFor("frontend")

      override def moduleDeps                     = Seq(shared.js)
      override def mvnDeps                        = external.frontend
    }

    object testing extends AppScalaModule with FoxxyPublish {
      override def mvnDeps = external.zio ++ Seq(
        mvn"com.zaxxer:HikariCP:7.0.2",
        mvn"dev.zio::zio-test:2.1.21",
        mvn"com.softwaremill.sttp.tapir::tapir-sttp-client:1.11.44",
        mvn"org.testcontainers:testcontainers:1.21.3",
        mvn"org.testcontainers:postgresql:1.21.3"
      )
    }
  }

  object reference extends Module {

    object backend extends AppScalaModule {
      override def moduleDeps = Seq(
        foxxy.backend,
        foxxy.shared.jvm,
        foxxy.repo,
        foxxy.auth,
        reference.shared.jvm
      )

      object test extends ScalaTests with TestModule.ZioTest {
        override def moduleDeps = super.moduleDeps ++ Seq(foxxy.testing)
        override def mvnDeps    = Seq(
          mvn"dev.zio::zio-test:2.1.21",
          mvn"dev.zio::zio-test-sbt:2.1.21",
          mvn"dev.zio::zio-test-magnolia:2.1.21",
          mvn"com.softwaremill.sttp.tapir::tapir-sttp-client:1.11.44",
          mvn"org.testcontainers:testcontainers:1.21.3",
          mvn"org.testcontainers:postgresql:1.21.3"
        )
      }
    }

    object shared extends Module {
      trait SharedModule extends AppScalaModule with PlatformScalaModule {}

      object jvm extends SharedModule {
        override def moduleDeps = Seq(foxxy.shared.jvm)
        override def mvnDeps    = external.zio ++ external.tapir
      }

      object js extends SharedModule with AppScalaJSModule {
        override def moduleDeps = Seq(foxxy.shared.js)
        override def mvnDeps    = external.zio_js ++ external.tapir_js
      }
    }

    object frontend extends AppScalaJSModule {
      override def moduleKind = ModuleKind.ESModule
      override def moduleDeps                     = Seq(shared.js, foxxy.frontend)
      override def mvnDeps                        = external.frontend
    }

    object frontend_vite extends Module {
      def moduleDeps = Seq(frontend)

      def compile() = Task.Command {
        val jsPath = frontend.fastLinkJS().dest.path

        if (!os.exists(frontend_vite.moduleDir / "webapp")) {
          os.makeDir(frontend_vite.moduleDir / "webapp")
        }
        os.copy(
          jsPath / "main.js",
          frontend_vite.moduleDir / "webapp" / "main.js",
          replaceExisting = true
        )
        os.copy(
          jsPath / "main.js.map",
          frontend_vite.moduleDir / "webapp" / "main.js.map",
          replaceExisting = true
        )
      }
    }
  }
}
